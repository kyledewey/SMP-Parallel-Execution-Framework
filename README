Simple framework for executing massively parallel tasks.  It supports
pluggable tasks and pluggable task schedulers.  By default, it allows
for parallel console commands scheduled in a queue, where the number of
tasks running in parallel is equal to the number of available cores.

INSTALLATION:
mkdir -p parallel/smp
make

USAGE:
FileAnalysisFramework works like so:
java parallel.smp.FileAnalysisFramework "command that takes a file name" files-to-process

...for example:
java parallel.smp.FileAnalysisFramework "./foo" file1.txt file2.txt file3.txt

The above command like will execute:
./foo file1.txt
./foo file2.txt
./foo file3.txt

These will be executed in parallel where possible (due to limitations of the
number of cores). Since output isn't captured, all output must be done to
files. 

The default queue scheduler doesn't provide any guarentees regarding execution
order. While it is true that file N must be selected for processing before
file N + 1, file N + 1 may end up being processed first depending on how the
JVM schedules threads. If any guarentees are needed regarding execution order,
it will be neccessary to implement your own scheduler.

